import{_ as n,o as s,c as a,a as t}from"../app.dbff23ac.mjs";const p={},e=t(`<h1 id="opengauss\u5217\u5B58\u538B\u7F29\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#opengauss\u5217\u5B58\u538B\u7F29\u7B97\u6CD5" aria-hidden="true">#</a> openGauss\u5217\u5B58\u538B\u7F29\u7B97\u6CD5</h1><p>\u5728openGauss\u6570\u636E\u5E93\u4E2D\uFF0C\u76F8\u5BF9\u4E8E\u884C\u5B58\u4EE5\u9875\u4E3A\u5355\u5143\u8FDB\u884C\u538B\u7F29\uFF0C\u5217\u5B58\u4EE5CU\u4E3A\u5355\u5143\u5177\u6709\u5929\u7136\u7684\u538B\u7F29\u4F18\u52BF\u3002</p><p>\u5728openGauss\u4E2D\u6709\u4E09\u79CD\u538B\u7F29\u7EA7\u522B\uFF1ALOW, MIDDLE, HIGH\u3002\u6307\u5B9A\u7684\u538B\u7F29\u7B49\u7EA7\u8D8A\u9AD8\uFF0C\u5219\u6570\u636E\u7684\u538B\u7F29\u7387\u8D8A\u9AD8\u3002\u9664\u6B64\u4E4B\u5916\u8FD8\u53EF\u4EE5\u9009\u62E9\u4E0D\u5F00\u542F\u538B\u7F29\u3002</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">OptCompress</span> <span class="token punctuation">{</span>
    COMPRESS_NO <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    COMPRESS_LOW<span class="token punctuation">,</span>
    COMPRESS_MIDDLE<span class="token punctuation">,</span>
    COMPRESS_HIGH<span class="token punctuation">,</span>
<span class="token punctuation">}</span> OptCompress<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8E\u538B\u7F29\u7B97\u6CD5\uFF0C\u4E00\u5171\u6709\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_DeltaCompressed</span> <span class="token expression"><span class="token number">0x0001</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_DicEncode</span> <span class="token expression"><span class="token number">0x0002</span></span></span>
<span class="token comment">// CU_CompressExtend is used for extended compression.</span>
<span class="token comment">// For compression added afterwards, it can be defined as CU_CompressExtend + 0x0001~0x0008</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_CompressExtend</span> <span class="token expression"><span class="token number">0x0004</span>    </span><span class="token comment">// Used for extended compression</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_Delta2Compressed</span> <span class="token expression"><span class="token number">0x0005</span>  </span><span class="token comment">// CU_Delta2Compressed equals CU_CompressExtend plus 0x0001</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_XORCompressed</span> <span class="token expression"><span class="token number">0x0006</span>     </span><span class="token comment">// CU_XORCompressed equals CU_CompressExtend plus 0x0002</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_RLECompressed</span> <span class="token expression"><span class="token number">0x0008</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_LzCompressed</span> <span class="token expression"><span class="token number">0x0010</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_ZlibCompressed</span> <span class="token expression"><span class="token number">0x0020</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_BitpackCompressed</span> <span class="token expression"><span class="token number">0x0040</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CU_IntLikeCompressed</span> <span class="token expression"><span class="token number">0x0080</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8E\u4E00\u4E2ACU\u7684\u538B\u7F29\uFF0C\u4EE3\u7801\u5728<code>CU::Compress(int valCount, int16 compress_modes, int align_size)</code>\u51FD\u6570\u91CC\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">CU</span><span class="token double-colon punctuation">::</span><span class="token function">Compress</span><span class="token punctuation">(</span><span class="token keyword">int</span> valCount<span class="token punctuation">,</span> int16 compress_modes<span class="token punctuation">,</span> <span class="token keyword">int</span> align_size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    errno_t rc<span class="token punctuation">;</span>

    <span class="token comment">// Step1: \u521D\u59CB\u5316\uFF0C\u4E3Acompress_buffer\u5206\u914D\u5185\u5B58\uFF0C\u539F\u6570\u636E\u5927\u5C0F + NULL\u503C\u4F4D\u56FE\u5927\u5C0F + \u5934\u90E8\u5927\u5C0F\uFF0C\u538B\u7F29\u540E\u5927\u5C0F\u4E0D\u4F1A\u8D85\u8FC7\u5206\u914D\u7684compress_buffer\u5927\u5C0F</span>
    m_compressedBufSize <span class="token operator">=</span> <span class="token class-name">CUAlignUtils</span><span class="token double-colon punctuation">::</span><span class="token function">AlignCuSize</span><span class="token punctuation">(</span>m_srcDataSize <span class="token operator">+</span> m_bpNullRawSize <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CU<span class="token punctuation">)</span><span class="token punctuation">,</span> align_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_compressedBuf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token class-name">CStoreMemAlloc</span><span class="token double-colon punctuation">::</span><span class="token function">Palloc</span><span class="token punctuation">(</span>m_compressedBufSize<span class="token punctuation">,</span> <span class="token operator">!</span>m_inCUCache<span class="token punctuation">)</span><span class="token punctuation">;</span>

    int16 headerLen <span class="token operator">=</span> <span class="token function">GetCUHeaderSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> buf <span class="token operator">=</span> m_compressedBuf <span class="token operator">+</span> headerLen<span class="token punctuation">;</span>

    <span class="token comment">// Step 2: \u586B\u5145CU\u7684NULL\u503C bitmap \u4F4D\u56FE</span>
    buf <span class="token operator">=</span> <span class="token function">CompressNullBitmapIfNeed</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Step 3: \u538B\u7F29CU\u5185\u7684\u6570\u636E</span>
    <span class="token keyword">bool</span> compressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>COMPRESS_NO <span class="token operator">!=</span> <span class="token function">heaprel_get_compression_from_modes</span><span class="token punctuation">(</span>compress_modes<span class="token punctuation">)</span><span class="token punctuation">)</span>
        compressed <span class="token operator">=</span> <span class="token function">CompressData</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> valCount<span class="token punctuation">,</span> compress_modes<span class="token punctuation">,</span> align_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// case 1: \u7528\u6237\u5B9A\u4E49\u6570\u636E\u4E0D\u9700\u8981\u88AB\u52A0\u5BC6</span>
    <span class="token comment">// case 2: \u7528\u6237\u5B9A\u4E49\u4E86\u52A0\u5BC6\uFF0C\u4F46\u52A0\u5BC6\u540E\u6570\u636E\u5927\u5C0F\u6BD4\u672A\u52A0\u5BC6\u6570\u636E\u8FD8\u5927\uFF0C\u6240\u4EE5\u76F4\u63A5\u4F7F\u7528\u539F\u6765\u7684\u6570\u636E</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>compressed <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rc <span class="token operator">=</span> <span class="token function">memcpy_s</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> m_srcDataSize<span class="token punctuation">,</span> m_srcData<span class="token punctuation">,</span> m_srcDataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">securec_check</span><span class="token punctuation">(</span>rc<span class="token punctuation">,</span> <span class="token string">&quot;\\0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_cuSizeExcludePadding <span class="token operator">=</span> headerLen <span class="token operator">+</span> m_bpNullCompressedSize <span class="token operator">+</span> m_srcDataSize<span class="token punctuation">;</span>
        m_cuSize <span class="token operator">=</span> <span class="token class-name">CUAlignUtils</span><span class="token double-colon punctuation">::</span><span class="token function">AlignCuSize</span><span class="token punctuation">(</span>m_cuSizeExcludePadding<span class="token punctuation">,</span> align_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">PADDING_CU</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> m_srcDataSize<span class="token punctuation">,</span> m_cuSize <span class="token operator">-</span> m_cuSizeExcludePadding<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// \u538B\u7F29\u540E\u8FDB\u884C\u52A0\u5BC6</span>
    <span class="token function">CUDataEncrypt</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Step 4: \u586B\u5145 compress_buffer \u7684\u5934\u90E8</span>
    <span class="token function">FillCompressBufHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    m_cache_compressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// Step 5; \u91CA\u653E\u539F\u6570\u636Ebuf</span>
    <span class="token function">FreeSrcBuf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5B9E\u9645\u7684\u6570\u636E\u538B\u7F29\u53D1\u751F\u5728<code>CU::CompressData(_out_ char* outBuf, _in_ int nVals, _in_ int16 compress_modes, int align_size)</code>\u51FD\u6570\u91CC\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">CU</span><span class="token double-colon punctuation">::</span><span class="token function">CompressData</span><span class="token punctuation">(</span>_out_ <span class="token keyword">char</span><span class="token operator">*</span> outBuf<span class="token punctuation">,</span> _in_ <span class="token keyword">int</span> nVals<span class="token punctuation">,</span> _in_ int16 compress_modes<span class="token punctuation">,</span> <span class="token keyword">int</span> align_size<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> compressOutSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> beDelta2Compressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">bool</span> beXORCompressed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">// \u83B7\u53D6\u538B\u7F29\u7EA7\u522B</span>
    int8 compression <span class="token operator">=</span> <span class="token function">heaprel_get_compression_from_modes</span><span class="token punctuation">(</span>compress_modes<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u538B\u7F29\u7ED3\u679C\u8F93\u51FA\u5230outBuf</span>
    CompressionArg2 output <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    output<span class="token punctuation">.</span>buf <span class="token operator">=</span> outBuf<span class="token punctuation">;</span>
    output<span class="token punctuation">.</span>sz <span class="token operator">=</span> <span class="token punctuation">(</span>m_compressedBuf <span class="token operator">+</span> m_compressedBufSize<span class="token punctuation">)</span> <span class="token operator">-</span> outBuf<span class="token punctuation">;</span>

    <span class="token comment">// \u538B\u7F29\u7684\u8F93\u5165\uFF0C\u5C31\u662FCU\u6570\u636E</span>
    CompressionArg1 input <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    input<span class="token punctuation">.</span>sz <span class="token operator">=</span> m_srcDataSize<span class="token punctuation">;</span>
    input<span class="token punctuation">.</span>buf <span class="token operator">=</span> m_srcData<span class="token punctuation">;</span>
    input<span class="token punctuation">.</span>mode <span class="token operator">=</span> compress_modes<span class="token punctuation">;</span>

    <span class="token comment">// \u4E3A\u5F53\u524DCU\u7684\u6570\u636E\u8BBE\u7F6E compression filter</span>
    compression_options<span class="token operator">*</span> ref_filter <span class="token operator">=</span> <span class="token punctuation">(</span>compression_options<span class="token operator">*</span><span class="token punctuation">)</span>m_tmpinfo<span class="token operator">-&gt;</span>m_options<span class="token punctuation">;</span>

    <span class="token comment">// \u5982\u679C\u5141\u8BB8tsdb\uFF0C\u5E76\u4E14\u5C5E\u6027\u662Ftimestamp\u6216\u8005float\u7C7B\u578B:</span>
    <span class="token comment">// tsdb: \u65F6\u5E8F\u6570\u636E\u5E93</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>g_instance<span class="token punctuation">.</span>attr<span class="token punctuation">.</span>attr_common<span class="token punctuation">.</span>enable_tsdb <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">ATT_IS_TIMESTAMP</span><span class="token punctuation">(</span>m_atttypid<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">ATT_IS_FLOAT</span><span class="token punctuation">(</span>m_atttypid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        SequenceCodec <span class="token function">sequenceCoder</span><span class="token punctuation">(</span>m_eachValSize<span class="token punctuation">,</span> m_atttypid<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// \u7531SequenceCodec\u7C7B\u5B8C\u6210</span>
        compressOutSize <span class="token operator">=</span> sequenceCoder<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ATT_IS_TIMESTAMP</span><span class="token punctuation">(</span>m_atttypid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beDelta2Compressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// timestamp\u5219\u4F7F\u7528\u4E86Delta2\u538B\u7F29</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ATT_IS_FLOAT</span><span class="token punctuation">(</span>m_atttypid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beXORCompressed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token comment">// float\u5219\u4F7F\u7528\u4E86XOR\u538B\u7F29</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5982\u679C\u538B\u7F29\u7ED3\u679C\u5C0F\u4E8E0\u6216\u8005\u6CA1\u6709\u7528Delta2\u548CXOR\u538B\u7F29\uFF0C\u8BF4\u660E\u8981\u4E48\u4E0A\u4E00\u6B65\u6CA1\u6709\u6210\u529F\u538B\u7F29\uFF0C\u8981\u4E48\u4E0D\u662Ftimestamp\u548Cfloat\u7C7B\u578B</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>compressOutSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>beDelta2Compressed <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>beXORCompressed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        output <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        output<span class="token punctuation">.</span>buf <span class="token operator">=</span> outBuf<span class="token punctuation">;</span>
        output<span class="token punctuation">.</span>sz <span class="token operator">=</span> <span class="token punctuation">(</span>m_compressedBuf <span class="token operator">+</span> m_compressedBufSize<span class="token punctuation">)</span> <span class="token operator">-</span> outBuf<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_infoMode <span class="token operator">&amp;</span> CU_IntLikeCompressed<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// \u662F\u7C7B\u6574\u578B</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ATT_IS_CHAR_TYPE</span><span class="token punctuation">(</span>m_atttypid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">// \u5C5E\u6027\u662Fchar\u7C7B\u578B\u7684</span>
                IntegerCoder <span class="token function">intCoder</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// \u7531IntegerCoder\u7C7B\u5B8C\u6210</span>

                <span class="token comment">/* set min/max value */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_tmpinfo<span class="token operator">-&gt;</span>m_valid_minmax<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    intCoder<span class="token punctuation">.</span><span class="token function">SetMinMaxVal</span><span class="token punctuation">(</span>m_tmpinfo<span class="token operator">-&gt;</span>m_min_value<span class="token punctuation">,</span> m_tmpinfo<span class="token operator">-&gt;</span>m_max_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \u544A\u8BC9IntegerCoder\u662F\u5426\u4F7F\u7528RLE\u538B\u7F29</span>
                intCoder<span class="token punctuation">.</span>m_adopt_rle <span class="token operator">=</span> ref_filter<span class="token operator">-&gt;</span>m_adopt_rle<span class="token punctuation">;</span>
                compressOutSize <span class="token operator">=</span> intCoder<span class="token punctuation">.</span><span class="token function">Compress</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ATT_IS_NUMERIC_TYPE</span><span class="token punctuation">(</span>m_atttypid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// \u5C5E\u6027\u662Fnumeric\u7C7B\u578B\u7684</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>compression <span class="token operator">&gt;</span> COMPRESS_LOW<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment">// \u538B\u7F29\u7EA7\u522B\u5927\u4E8ELOW\uFF0C\u662FMIDDLE\u6216\u8005HIGH</span>
                    <span class="token comment">/// numeric data type compression.</span>
                    <span class="token comment">/// lz4/zlib is used directly.              // \u76F4\u63A5\u4F7F\u7528lz4/zlib\u538B\u7F29</span>
                    input<span class="token punctuation">.</span>buildGlobalDict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    input<span class="token punctuation">.</span>useGlobalDict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    input<span class="token punctuation">.</span>globalDict <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
                    input<span class="token punctuation">.</span>useDict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    input<span class="token punctuation">.</span>numVals <span class="token operator">=</span> <span class="token function">HasNullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>nVals <span class="token operator">-</span> <span class="token function">CountNullValuesBefore</span><span class="token punctuation">(</span>nVals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> nVals<span class="token punctuation">;</span>

                    StringCoder strCoder<span class="token punctuation">;</span>                       <span class="token comment">// \u7531StringCoder\u7C7B\u5B8C\u6210</span>
                    compressOutSize <span class="token operator">=</span> strCoder<span class="token punctuation">.</span><span class="token function">Compress</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// for future, another type             // \u672A\u6765\u7684\u5176\u4ED6\u7C7B\u578B</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m_eachValSize <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> m_eachValSize <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// \u7C7B\u578B\u5927\u5C0F\u5728(0, 8]\u8303\u56F4</span>
            IntegerCoder <span class="token function">intCoder</span><span class="token punctuation">(</span>m_eachValSize<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// \u7531IntegerCoder\u5B8C\u6210</span>
            <span class="token comment">/* set min/max value */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_tmpinfo<span class="token operator">-&gt;</span>m_valid_minmax<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                intCoder<span class="token punctuation">.</span><span class="token function">SetMinMaxVal</span><span class="token punctuation">(</span>m_tmpinfo<span class="token operator">-&gt;</span>m_min_value<span class="token punctuation">,</span> m_tmpinfo<span class="token operator">-&gt;</span>m_max_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// \u544A\u8BC9IntegerCoder\u662F\u5426\u4F7F\u7528RLE\u538B\u7F29</span>
            intCoder<span class="token punctuation">.</span>m_adopt_rle <span class="token operator">=</span> ref_filter<span class="token operator">-&gt;</span>m_adopt_rle<span class="token punctuation">;</span>         
            compressOutSize <span class="token operator">=</span> intCoder<span class="token punctuation">.</span><span class="token function">Compress</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// \u7531IntegerCoder\u7C7B\u5B8C\u6210</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// FUTURE CASE: complete global dictionary              // \u672A\u6765\u4F1A\u652F\u6301\u7684\uFF1A\u5168\u5C40\u5B57\u5178\u538B\u7F29</span>
            <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> m_eachValSize <span class="token operator">||</span> m_eachValSize <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// \u7C7B\u578B\u5927\u5C0F\u5927\u4E8E8\uFF0C\u6216\u8005\u4E3A-1\uFF08\u53D8\u957F\u5B57\u7B26\uFF09</span>
            input<span class="token punctuation">.</span>buildGlobalDict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            input<span class="token punctuation">.</span>useGlobalDict <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            input<span class="token punctuation">.</span>globalDict <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

            <span class="token comment">// \u7C7B\u578B\u5927\u5C0F\u5927\u4E8E8\u7684\u76F4\u63A5\u4F7F\u7528lz4/zlib\uFF0C\u4E0D\u7528\u5B57\u5178\u65B9\u6CD5</span>

            <span class="token comment">// \u7C7B\u578B\u5927\u5C0F\u4E3A-1\u7684\uFF0C\u8BF4\u660E\u662F\u53D8\u957F\u7C7B\u578B\uFF0C\u5982\u679C\u538B\u7F29\u7EA7\u522B\u4E0D\u662FLOW\u5219\u4F7F\u7528\u5B57\u5178\u538B\u7F29</span>
            input<span class="token punctuation">.</span>useDict <span class="token operator">=</span> <span class="token punctuation">(</span>m_eachValSize <span class="token operator">&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token punctuation">(</span>COMPRESS_LOW <span class="token operator">!=</span> compression<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// values\u7684\u6570\u91CF\u662F\u9664\u6389\u4E86\u7A7A\u503C\u7684</span>
            input<span class="token punctuation">.</span>numVals <span class="token operator">=</span> <span class="token function">HasNullValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>nVals <span class="token operator">-</span> <span class="token function">CountNullValuesBefore</span><span class="token punctuation">(</span>nVals<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> nVals<span class="token punctuation">;</span>

            <span class="token comment">// \u7531StringCoder\u7C7B\u5B8C\u6210</span>
            StringCoder strCoder<span class="token punctuation">;</span>
            <span class="token comment">// \u63D0\u793AStringCoder\u7C7B\u662F\u5426\u4F7F\u7528RLE\u548C\u5B57\u5178\u538B\u7F29</span>
            strCoder<span class="token punctuation">.</span>m_adopt_rle <span class="token operator">=</span> ref_filter<span class="token operator">-&gt;</span>m_adopt_rle<span class="token punctuation">;</span>
            strCoder<span class="token punctuation">.</span>m_adopt_dict <span class="token operator">=</span> ref_filter<span class="token operator">-&gt;</span>m_adopt_dict<span class="token punctuation">;</span>
            compressOutSize <span class="token operator">=</span> strCoder<span class="token punctuation">.</span><span class="token function">Compress</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>compressOutSize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u538B\u7F29\u6210\u529F\uFF0C\u8BA1\u7B97CU\u5927\u5C0F\uFF0C\u8BBE\u7F6E\u76F8\u5173\u538B\u7F29\u4FE1\u606F</span>
        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint32<span class="token punctuation">)</span>compressOutSize <span class="token operator">&lt;</span> m_srcDataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">(</span>output<span class="token punctuation">.</span>modes <span class="token operator">&amp;</span> CU_INFOMASK2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>output<span class="token punctuation">.</span>modes <span class="token operator">&amp;</span> CU_INFOMASK1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        m_infoMode <span class="token operator">|=</span> <span class="token punctuation">(</span>output<span class="token punctuation">.</span>modes <span class="token operator">&amp;</span> CU_INFOMASK1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        m_cuSizeExcludePadding <span class="token operator">=</span> <span class="token punctuation">(</span>outBuf <span class="token operator">-</span> m_compressedBuf<span class="token punctuation">)</span> <span class="token operator">+</span> compressOutSize<span class="token punctuation">;</span>
        m_cuSize <span class="token operator">=</span> <span class="token class-name">CUAlignUtils</span><span class="token double-colon punctuation">::</span><span class="token function">AlignCuSize</span><span class="token punctuation">(</span>m_cuSizeExcludePadding<span class="token punctuation">,</span> align_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Assert</span><span class="token punctuation">(</span>m_cuSize <span class="token operator">&lt;=</span> m_compressedBufSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">PADDING_CU</span><span class="token punctuation">(</span>m_compressedBuf <span class="token operator">+</span> m_cuSizeExcludePadding<span class="token punctuation">,</span> m_cuSize <span class="token operator">-</span> m_cuSizeExcludePadding<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ref_filter<span class="token operator">-&gt;</span>m_sampling_fihished<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">/* sample and set adopted compression methods */</span>
            ref_filter<span class="token operator">-&gt;</span><span class="token function">set_common_flags</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>modes<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5BF9\u4E8ESequenceCodec\u7C7B\u7684\u538B\u7F29\uFF0C\u4F1A\u5148\u5224\u65AD\u7C7B\u578B\uFF0C\u5982\u679C\u662Ftimestamp\u5219\u4F7F\u7528Delta2\u538B\u7F29\uFF0C\u662Ffloat\u7C7B\u578B\u5219\u4F7F\u7528XOR\u538B\u7F29\u3002\u7136\u540E\u8FD8\u4F1A\u5224\u65AD\u538B\u7F29\u7EA7\u522B\uFF0C\u5982\u679C\u662FMIDDLE\u6216HIGH\u5219\u8FD8\u9700\u8981\u5206\u522B\u4F7F\u7528lz4\u548Czlib\u8FDB\u884C\u538B\u7F29\u3002</p><p>\u5BF9\u4E8EIntegerCoder\u7C7B\u7684\u538B\u7F29\uFF0C\u4F1A\u5148\u8FDB\u884CDelta\u538B\u7F29\uFF0C\u5982\u679C\u4F7F\u7528RLE\u7684\u8BDD\u518D\u4F7F\u7528RLE\u538B\u7F29\uFF0C\u7136\u540E\u5BF9\u538B\u7F29\u7EA7\u522B\u4E3AMIDDLE\u548CHIGH\u7684\u60C5\u51B5\u5206\u522B\u4F7F\u7528lz4\u548Czlib\u538B\u7F29\u3002</p><p>\u5BF9\u4E8EStringCoder\u7C7B\u7684\u538B\u7F29\uFF0C\u4F1A\u5148\u5224\u65AD\u662F\u5426\u4F7F\u7528\u5B57\u5178\u538B\u7F29\uFF0C\u5982\u679C\u4F7F\u7528\u5219\u5148\u8FDB\u884C\u5B57\u5178\u538B\u7F29\uFF0C\u7136\u540E\u5BF9\u6570\u5B57\u90E8\u5206\u4F7F\u7528IntegerCoder\u8FDB\u884C\u538B\u7F29\u3002\u5982\u679C\u5B57\u5178\u538B\u7F29\u5931\u8D25\u6216\u8005\u6CA1\u6709\u5141\u8BB8\u4F7F\u7528\u5B57\u5178\u538B\u7F29\uFF0C\u5219\u76F4\u63A5\u5BF9\u4E8ELOW\u548CMIDDLE\u7EA7\u522B\u4F7F\u7528lz4\u538B\u7F29\uFF0C\u5BF9\u4E8EHIGH\u7EA7\u522B\u4F7F\u7528zlib\u538B\u7F29\u3002</p><hr><p>\u53EF\u4EE5\u770B\u5230\u6574\u4E2A\u6D41\u7A0B\u4E3A\uFF1A \u5148\u5224\u65AD\u662F\u5426\u5141\u8BB8\u4E86tsdb\uFF08\u65F6\u5E8F\u6570\u636E\u5E93\uFF09\u5E76\u4E14\u7C7B\u578B\u4E3Atimestamp\u6216\u8005float\u7C7B\u578B\uFF0C\u5982\u679C\u662F\uFF0C\u5219\u538B\u7F29\u662F\u7531SequenceCodec\u7C7B\u5B8C\u6210\u7684\uFF0Ctimestamp\u5219\u4F7F\u7528\u4E86Delta2\u538B\u7F29\uFF0Cfloat\u5219\u4F7F\u7528\u4E86XOR\u538B\u7F29\u3002\u5982\u679C\u538B\u7F29\u7EA7\u522B\u4E3AMIDDLE\u6216HIGH\uFF0C\u5219\u8FD8\u9700\u8981\u8FDB\u884Clz4\u6216zlib\u538B\u7F29\u3002 \u5BF9\u4E8Etimestamp\u548Cfloat\u7C7B\u578B\uFF1A</p><table><thead><tr><th></th><th>LOW</th><th>MIDDLE</th><th>HIGH</th></tr></thead><tbody><tr><td>timestamp</td><td>Delta2</td><td>Delta2 + lz4</td><td>Delta2 + zlib</td></tr><tr><td>float</td><td>XOR</td><td>XOR + lz4</td><td>XOR + zlib</td></tr></tbody></table><p>\u5982\u679C\u4E0D\u5141\u8BB8tsdb\u6216\u8005\u4E0A\u4E00\u6B65\u6CA1\u6709\u6210\u529F\u538B\u7F29\uFF0C\u5219\u8FDB\u5165\u4EE5\u4E0B\u7684\u6D41\u7A0B:</p><p>\u5982\u679C\u662FIntLike\uFF08\u7C7B\u6574\u578B\uFF09\uFF1Achar\u7C7B\u578B\u5219\u7531IntegerCoder\u7C7B\u5B8C\u6210\uFF0C\u5148\u4F7F\u7528Delta\u538B\u7F29\uFF0C\u5982\u679C\u5F00\u542F\u4E86RLE\u5219\u4F7F\u7528RLE\u538B\u7F29\uFF0C\u5982\u679C\u538B\u7F29\u7EA7\u522B\u4E3AMIDDLE\u6216HIGH\uFF0C\u5219\u8FD8\u9700\u8981\u8FDB\u884Clz4\u6216zlib\u538B\u7F29\u3002</p><table><thead><tr><th></th><th>LOW</th><th>MIDDLE</th><th>HIGH</th></tr></thead><tbody><tr><td>char</td><td>Delta + RLE(\u53EF\u9009)</td><td>Delta + RLE(\u53EF\u9009) + lz4</td><td>Delta + RLE(\u53EF\u9009) + zlib</td></tr></tbody></table><p>numeric\u7C7B\u578B\u5219\u8981\u5224\u65AD\u538B\u7F29\u7EA7\u522B\uFF0C\u5982\u679C\u7EA7\u522B\u4E3ALOW\uFF0C\u5219\u4E0D\u538B\u7F29numeric\u7C7B\u578B\u3002\u5F53\u7EA7\u522B\u4E3AMIDDLE\u6216HIGH\u65F6\uFF0C\u76F4\u63A5\u4F7F\u7528lz4/zlib\u538B\u7F29\uFF0C\u7531StringCoder\u7C7B\u5B8C\u6210\u3002</p><table><thead><tr><th></th><th>LOW</th><th>MIDDLE</th><th>HIGH</th></tr></thead><tbody><tr><td>numeric</td><td>\u4E0D\u538B\u7F29</td><td>lz4</td><td>zlib</td></tr></tbody></table><p>\u5BF9\u4E8E\u4E0D\u662FIntLike\uFF08\u7C7B\u6574\u578B\uFF09\u7684\u60C5\u51B5\uFF0C\u5982\u679C\u7C7B\u578B\u5927\u5C0F\u5728(0, 8]\u8303\u56F4\uFF0C\u5219\u7531IntegerCoder\u7C7B\u5B8C\u6210\uFF0C\u5E76\u4F7F\u7528RLE\u538B\u7F29\uFF0C\u5982\u679C\u7EA7\u522B\u4E3AMIDDLE\u6216HIGH\u8FD8\u9700\u8981\u5206\u522B\u4F7F\u7528lz4\u548Czlib\u538B\u7F29\u3002</p><table><thead><tr><th></th><th>LOW</th><th>MIDDLE</th><th>HIGH</th></tr></thead><tbody><tr><td>\u957F\u5EA6\u4E0D\u5927\u4E8E8\u7684\u5B9A\u957F\u5B57\u7B26</td><td>Delta + RLE(\u53EF\u9009)</td><td>Delta + RLE(\u53EF\u9009) + lz4</td><td>Delta + RLE(\u53EF\u9009) + zlib</td></tr></tbody></table><p>\u7C7B\u578B\u5927\u5C0F\u5927\u4E8E8\u7684\u76F4\u63A5\u4F7F\u7528lz4/zlib\uFF0C\u4E0D\u4F7F\u7528\u5B57\u5178\u538B\u7F29\uFF1A</p><table><thead><tr><th></th><th>LOW</th><th>MIDDLE</th><th>HIGH</th></tr></thead><tbody><tr><td>\u957F\u5EA6\u5927\u4E8E8\u7684\u5B9A\u957F\u5B57\u7B26</td><td>lz4</td><td>lz4</td><td>zlib</td></tr></tbody></table><p>\u7C7B\u578B\u5927\u5C0F\u4E3A-1\u7684\uFF0C\u8BF4\u660E\u662F\u53D8\u957F\u7C7B\u578B\uFF0C\u5982\u679C\u538B\u7F29\u7EA7\u522B\u4E3ALOW\u5219\u4E0D\u4F7F\u7528\u5B57\u5178\uFF0C\u76F4\u63A5\u4F7F\u7528lz4\u3002\u5982\u679C\u538B\u7F29\u7EA7\u522B\u4E3AMIDDLE\u6216HIGH\uFF0C\u5C1D\u8BD5\u7528\u5B57\u5178\u65B9\u6CD5\uFF0C\u7136\u540E\u5BF9\u6570\u5B57\u90E8\u5206\u4F7F\u7528IntegerCodr\u8FDB\u884C\u538B\u7F29\uFF1A</p><table><thead><tr><th></th><th>LOW</th><th>MIDDLE</th><th>HIGH</th></tr></thead><tbody><tr><td>\u53D8\u957F\u5B57\u7B26</td><td>lz4</td><td>\u5B57\u5178 + Delta + RLE(\u53EF\u9009) + lz4</td><td>\u5B57\u5178 + Delta + RLE(\u53EF\u9009) + zlib</td></tr></tbody></table><p>\u7EFC\u4E0A\uFF1A</p><table><thead><tr><th></th><th>LOW</th><th>MIDDLE</th><th>HIGH</th></tr></thead><tbody><tr><td>timestamp</td><td>Delta2</td><td>Delta2 + lz4</td><td>Delta2 + zlib</td></tr><tr><td>float</td><td>XOR</td><td>XOR + lz4</td><td>XOR + zlib</td></tr><tr><td>char</td><td>Delta + RLE(\u53EF\u9009)</td><td>Delta + RLE(\u53EF\u9009) + lz4</td><td>Delta + RLE(\u53EF\u9009) + zlib</td></tr><tr><td>numeric</td><td>\u4E0D\u538B\u7F29</td><td>lz4</td><td>zlib</td></tr><tr><td>\u957F\u5EA6\u4E0D\u5927\u4E8E8\u7684\u5B9A\u957F\u5B57\u7B26</td><td>Delta + RLE(\u53EF\u9009)</td><td>Delta + RLE(\u53EF\u9009) + lz4</td><td>Delta + RLE(\u53EF\u9009) + zlib</td></tr><tr><td>\u957F\u5EA6\u5927\u4E8E8\u7684\u5B9A\u957F\u5B57\u7B26</td><td>lz4</td><td>lz4</td><td>zlib</td></tr><tr><td>\u53D8\u957F\u5B57\u7B26</td><td>lz4</td><td>\u5B57\u5178 + Delta + RLE(\u53EF\u9009) + lz4</td><td>\u5B57\u5178 + Delta + RLE(\u53EF\u9009) + zlib</td></tr></tbody></table>`,29),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","openGauss\u5217\u5B58\u6570\u636E\u538B\u7F29\u6E90\u7801\u5206\u6790.html.vue"]]);export{r as default};
