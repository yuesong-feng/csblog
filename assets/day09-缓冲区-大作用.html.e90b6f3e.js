import{_ as p,o as t,c as o,b as n,d as e,a as c,e as s,r as u}from"../app.dbff23ac.mjs";const l={},i=c(`<h1 id="day09-\u7F13\u51B2\u533A-\u5927\u4F5C\u7528" tabindex="-1"><a class="header-anchor" href="#day09-\u7F13\u51B2\u533A-\u5927\u4F5C\u7528" aria-hidden="true">#</a> day09-\u7F13\u51B2\u533A-\u5927\u4F5C\u7528</h1><p>\u5728\u4E4B\u524D\u7684\u6559\u7A0B\u4E2D\uFF0C\u4E00\u4E2A\u5B8C\u6574\u7684\u5355\u7EBF\u7A0B\u670D\u52A1\u5668\u8BBE\u8BA1\u6A21\u5F0F\u5DF2\u7ECF\u7F16\u7801\u5B8C\u6210\u4E86\u3002\u5728\u8FDB\u5165\u591A\u7EBF\u7A0B\u7F16\u7A0B\u4E4B\u524D\uFF0C\u5E94\u8BE5\u5B8C\u5168\u7406\u89E3\u5355\u7EBF\u7A0B\u670D\u52A1\u5668\u7684\u5DE5\u4F5C\u539F\u7406\uFF0C\u56E0\u4E3A\u591A\u7EBF\u7A0B\u66F4\u52A0\u590D\u6742\u3001\u66F4\u52A0\u56F0\u96BE\uFF0C\u5F00\u53D1\u96BE\u5EA6\u8FDC\u5927\u4E8E\u4E4B\u524D\u7684\u5355\u7EBF\u7A0B\u6A21\u5F0F\u3002\u4E0D\u4EC5\u5982\u6B64\uFF0C\u8BFB\u8005\u4E5F\u5E94\u6839\u636E\u81EA\u5DF1\u7684\u7406\u89E3\u8FDB\u884C\u4E8C\u6B21\u5F00\u53D1\uFF0C\u5B8C\u5584\u670D\u52A1\u5668\uFF0C\u6BD4\u5982\u975E\u963B\u585E\u5F0Fsocket\u6A21\u5757\u5C31\u503C\u5F97\u7EC6\u7EC6\u7814\u7A76\u3002</p><p>\u4ECA\u5929\u7684\u6559\u7A0B\u548C\u4E4B\u524D\u51E0\u5929\u7684\u4E0D\u540C\uFF0C\u5F15\u5165\u4E86\u4E00\u4E2A\u6700\u7B80\u5355\u3001\u6700\u57FA\u672C\u7684\u7684\u7F13\u51B2\u533A\uFF0C\u53EF\u4EE5\u770B\u4F5C\u4E00\u4E2A\u5B8C\u5584\u3001\u6539\u8FDB\u670D\u52A1\u5668\u7684\u4F8B\u5B50\uFF0C\u66F4\u52A0\u504F\u5411\u4E8E\u7EC6\u8282\u800C\u4E0D\u662F\u67B6\u6784\u3002\u9664\u4E86\u8FD9\u4E00\u7EC6\u8282\uFF0C\u8BFB\u8005\u4E5F\u53EF\u4EE5\u6309\u7167\u81EA\u5DF1\u7684\u7406\u89E3\u5B8C\u5584\u670D\u52A1\u5668\u3002</p><p>\u540C\u65F6\uFF0C\u6211\u4EEC\u5DF2\u7ECF\u5C01\u88C5\u4E86socket\u3001epoll\u7B49\u57FA\u7840\u7EC4\u4EF6\uFF0C\u8FD9\u4E9B\u7EC4\u4EF6\u90FD\u53EF\u4EE5\u590D\u7528\u3002\u73B0\u5728\u6211\u4EEC\u5B8C\u5168\u53EF\u4EE5\u4F7F\u7528\u8FD9\u4E2A\u7F51\u7EDC\u5E93\u6765\u6539\u5199\u5BA2\u6237\u7AEF\u7A0B\u5E8F\uFF0C\u8BA9\u7A0B\u5E8F\u66F4\u52A0\u7B80\u5355\u660E\u4E86\uFF0C\u8BFB\u8005\u53EF\u4EE5\u81EA\u5DF1\u5C1D\u8BD5\u7528\u8FD9\u4E9B\u7EC4\u4EF6\u5199\u4E00\u4E2A\u5BA2\u6237\u7AEF\uFF0C\u7136\u540E\u548C\u6E90\u4EE3\u7801\u4E2D\u7684\u5BF9\u7167\u3002</p><p>\u5728\u6CA1\u6709\u7F13\u51B2\u533A\u7684\u65F6\u5019\uFF0C\u670D\u52A1\u5668\u56DE\u9001\u5BA2\u6237\u7AEF\u6D88\u606F\u7684\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ_BUFFER</span> <span class="token expression"><span class="token number">1024</span></span></span>
<span class="token keyword">void</span> <span class="token class-name">Connection</span><span class="token double-colon punctuation">::</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span>READ_BUFFER<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//\u7531\u4E8E\u4F7F\u7528\u975E\u963B\u585EIO\uFF0C\u8BFB\u53D6\u5BA2\u6237\u7AEFbuffer\uFF0C\u4E00\u6B21\u8BFB\u53D6buf\u5927\u5C0F\u6570\u636E\uFF0C\u76F4\u5230\u5168\u90E8\u8BFB\u53D6\u5B8C\u6BD5</span>
        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ssize_t bytes_read <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;message from client fd %d: %s\\n&quot;</span><span class="token punctuation">,</span> sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// \u53D1\u9001\u7ED9\u5BA2\u6237\u7AEF</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u5BA2\u6237\u7AEF\u6B63\u5E38\u4E2D\u65AD\u3001\u7EE7\u7EED\u8BFB\u53D6</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;continue reading&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u975E\u963B\u585EIO\uFF0C\u8FD9\u4E2A\u6761\u4EF6\u8868\u793A\u6570\u636E\u5168\u90E8\u8BFB\u53D6\u5B8C\u6BD5</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;finish reading once, errno: %d\\n&quot;</span><span class="token punctuation">,</span> errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//EOF\uFF0C\u5BA2\u6237\u7AEF\u65AD\u5F00\u8FDE\u63A5</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;EOF, client fd %d disconnected\\n&quot;</span><span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">deleteConnectionCallback</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u662F\u975E\u963B\u585E\u5F0Fsocket IO\u7684\u8BFB\u53D6\uFF0C\u53EF\u4EE5\u770B\u5230\u4F7F\u7528\u7684\u8BFB\u7F13\u51B2\u533A\u5927\u5C0F\u4E3A1024\uFF0C\u6BCF\u6B21\u4ECETCP\u7F13\u51B2\u533A\u8BFB\u53D61024\u5927\u5C0F\u7684\u6570\u636E\u5230\u8BFB\u7F13\u51B2\u533A\uFF0C\u7136\u540E\u53D1\u9001\u7ED9\u5BA2\u6237\u7AEF\u3002\u8FD9\u662F\u6700\u5E95\u5C42C\u8BED\u8A00\u7684\u7F16\u7801\uFF0C\u5728\u903B\u8F91\u4E0A\u6709\u5F88\u591A\u4E0D\u5408\u9002\u7684\u5730\u65B9\u3002\u6BD4\u5982\u6211\u4EEC\u4E0D\u77E5\u9053\u5BA2\u6237\u7AEF\u4FE1\u606F\u7684\u771F\u6B63\u5927\u5C0F\u662F\u591A\u5C11\uFF0C\u53EA\u80FD\u4EE51024\u7684\u8BFB\u7F13\u51B2\u533A\u53BB\u8BFBTCP\u7F13\u51B2\u533A\uFF08\u5C31\u7B97TCP\u7F13\u51B2\u533A\u7684\u6570\u636E\u6CA1\u67091024\uFF0C\u4E5F\u4F1A\u628A\u540E\u9762\u7684\u7528\u7A7A\u503C\u8865\u6EE1\uFF09\uFF1B\u4E5F\u4E0D\u80FD\u4E00\u6B21\u6027\u8BFB\u53D6\u6240\u6709\u5BA2\u6237\u7AEF\u6570\u636E\uFF0C\u518D\u7EDF\u4E00\u53D1\u7ED9\u5BA2\u6237\u7AEF\u3002</p><blockquote><p>\u5173\u4E8ETCP\u7F13\u51B2\u533A\u3001socket IO\u8BFB\u53D6\u7684\u7EC6\u8282\uFF0C\u5728\u300AUNIX\u7F51\u7EDC\u7F16\u7A0B\u300B\u5377\u4E00\u4E2D\u6709\u8BE6\u7EC6\u8BF4\u660E\uFF0C\u60F3\u8981\u7CBE\u901A\u7F51\u7EDC\u7F16\u7A0B\u51E0\u4E4E\u662F\u5FC5\u770B\u7684</p></blockquote><p>\u867D\u7136\u4EE5\u4E0A\u63D0\u5230\u7684\u7F3A\u70B9\u4EE5C\u8BED\u8A00\u7F16\u7A0B\u7684\u65B9\u5F0F\u90FD\u53EF\u4EE5\u89E3\u51B3\uFF0C\u4F46\u6211\u4EEC\u4ECD\u7136\u5E0C\u671B\u4EE5\u4E00\u79CD\u66F4\u52A0\u4F18\u7F8E\u7684\u65B9\u5F0F\u8BFB\u5199socket\u4E0A\u7684\u6570\u636E\uFF0C\u548C\u5176\u4ED6\u6A21\u5757\u4E00\u6837\uFF0C\u8131\u79BB\u5E95\u5C42\uFF0C\u8BA9\u6211\u4EEC\u4F7F\u7528\u7684\u65F6\u5019\u4E0D\u7528\u5728\u610F\u592A\u591A\u5E95\u5C42\u7EC6\u8282\u3002\u6240\u4EE5\u5C01\u88C5\u4E00\u4E2A\u7F13\u51B2\u533A\u662F\u5F88\u6709\u5FC5\u8981\u7684\uFF0C\u4E3A\u6BCF\u4E00\u4E2A<code>Connection</code>\u7C7B\u5206\u914D\u4E00\u4E2A\u8BFB\u7F13\u51B2\u533A\u548C\u5199\u7F13\u51B2\u533A\uFF0C\u4ECE\u5BA2\u6237\u7AEF\u8BFB\u53D6\u6765\u7684\u6570\u636E\u90FD\u5B58\u653E\u5728\u8BFB\u7F13\u51B2\u533A\u91CC\uFF0C\u8FD9\u6837<code>Connection</code>\u7C7B\u5C31\u4E0D\u518D\u76F4\u63A5\u4F7F\u7528<code>char buf[]</code>\u8FD9\u79CD\u6700\u7B28\u7684\u7F13\u51B2\u533A\u6765\u5904\u7406\u8BFB\u5199\u64CD\u4F5C\u3002</p><p>\u7F13\u51B2\u533A\u7C7B\u7684\u5B9A\u4E49\u5982\u4E0B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Buffer</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>string buf<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> _str<span class="token punctuation">,</span> <span class="token keyword">int</span> _size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ssize_t <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>\u8FD9\u4E2A\u7F13\u51B2\u533A\u7C7B\u4F7F\u7528<code>std::string</code>\u6765\u50A8\u5B58\u6570\u636E\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528<code>std::vector&lt;char&gt;</code>\uFF0C\u6709\u5174\u8DA3\u53EF\u4EE5\u6BD4\u8F83\u4E00\u4E0B\u8FD9\u4E24\u8005\u7684\u6027\u80FD\u3002</p></blockquote><p>\u4E3A\u6BCF\u4E00\u4E2ATCP\u8FDE\u63A5\u5206\u914D\u4E00\u4E2A\u8BFB\u7F13\u51B2\u533A\u540E\uFF0C\u5C31\u53EF\u4EE5\u628A\u5BA2\u6237\u7AEF\u7684\u4FE1\u606F\u8BFB\u53D6\u5230\u8FD9\u4E2A\u7F13\u51B2\u533A\u5185\uFF0C\u7F13\u51B2\u533A\u5927\u5C0F\u5C31\u662F\u5BA2\u6237\u7AEF\u53D1\u9001\u7684\u62A5\u6587\u771F\u5B9E\u5927\u5C0F\uFF0C\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">Connection</span><span class="token double-colon punctuation">::</span><span class="token function">echo</span><span class="token punctuation">(</span><span class="token keyword">int</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//\u8FD9\u4E2Abuf\u5927\u5C0F\u65E0\u6240\u8C13</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//\u7531\u4E8E\u4F7F\u7528\u975E\u963B\u585EIO\uFF0C\u8BFB\u53D6\u5BA2\u6237\u7AEFbuffer\uFF0C\u4E00\u6B21\u8BFB\u53D6buf\u5927\u5C0F\u6570\u636E\uFF0C\u76F4\u5230\u5168\u90E8\u8BFB\u53D6\u5B8C\u6BD5</span>
        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ssize_t bytes_read <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            readBuffer<span class="token operator">-&gt;</span><span class="token function">append</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> bytes_read<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u5BA2\u6237\u7AEF\u6B63\u5E38\u4E2D\u65AD\u3001\u7EE7\u7EED\u8BFB\u53D6</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;continue reading&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u975E\u963B\u585EIO\uFF0C\u8FD9\u4E2A\u6761\u4EF6\u8868\u793A\u6570\u636E\u5168\u90E8\u8BFB\u53D6\u5B8C\u6BD5</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;message from client fd %d: %s\\n&quot;</span><span class="token punctuation">,</span> sockfd<span class="token punctuation">,</span> readBuffer<span class="token operator">-&gt;</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">errif</span><span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> readBuffer<span class="token operator">-&gt;</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> readBuffer<span class="token operator">-&gt;</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;socket write error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            readBuffer<span class="token operator">-&gt;</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//EOF\uFF0C\u5BA2\u6237\u7AEF\u65AD\u5F00\u8FDE\u63A5</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;EOF, client fd %d disconnected\\n&quot;</span><span class="token punctuation">,</span> sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">deleteConnectionCallback</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728\u8FD9\u91CC\u4F9D\u7136\u6709\u4E00\u4E2A<code>char buf[]</code>\u7F13\u51B2\u533A\uFF0C\u7528\u4E8E\u7CFB\u7EDF\u8C03\u7528<code>read()</code>\u7684\u8BFB\u53D6\uFF0C\u8FD9\u4E2A\u7F13\u51B2\u533A\u5927\u5C0F\u65E0\u6240\u8C13\uFF0C\u4F46\u592A\u5927\u6216\u592A\u5C0F\u90FD\u53EF\u80FD\u5BF9\u6027\u80FD\u6709\u5F71\u54CD\uFF08\u592A\u5C0F\u8BFB\u53D6\u6B21\u6570\u589E\u591A\uFF0C\u592A\u5927\u8D44\u6E90\u6D6A\u8D39\u3001\u5355\u6B21\u8BFB\u53D6\u901F\u5EA6\u6162\uFF09\uFF0C\u8BBE\u7F6E\u4E3A1\u5230\u8BBE\u5907TCP\u7F13\u51B2\u533A\u7684\u5927\u5C0F\u90FD\u53EF\u4EE5\u3002\u4EE5\u4E0A\u4EE3\u7801\u4F1A\u628Asocket IO\u4E0A\u7684\u53EF\u8BFB\u6570\u636E\u5168\u90E8\u8BFB\u53D6\u5230\u7F13\u51B2\u533A\uFF0C\u7F13\u51B2\u533A\u5927\u5C0F\u5C31\u7B49\u4E8E\u5BA2\u6237\u7AEF\u53D1\u9001\u7684\u6570\u636E\u5927\u5C0F\u3002\u5168\u90E8\u8BFB\u53D6\u5B8C\u6210\u4E4B\u540E\uFF0C\u53EF\u4EE5\u6784\u9020\u4E00\u4E2A\u5199\u7F13\u51B2\u533A\u3001\u586B\u597D\u6570\u636E\u53D1\u9001\u7ED9\u5BA2\u6237\u7AEF\u3002\u7531\u4E8E\u662Fecho\u670D\u52A1\u5668\uFF0C\u6240\u4EE5\u8FD9\u91CC\u4F7F\u7528\u4E86\u76F8\u540C\u7684\u7F13\u51B2\u533A\u3002</p><p>\u81F3\u6B64\uFF0C\u4ECA\u5929\u7684\u6559\u7A0B\u5DF2\u7ECF\u7ED3\u675F\uFF0C\u8FD9\u4E2A\u7F13\u51B2\u533A\u53EA\u662F\u4E3A\u4E86\u6EE1\u8DB3\u5F53\u524D\u7684\u670D\u52A1\u5668\u529F\u80FD\u800C\u6784\u9020\u7684\u4E00\u4E2A\u6700\u7B80\u5355\u7684<code>Buffer</code>\u7C7B\uFF0C\u8FD8\u9700\u8981\u8FDB\u4E00\u6B65\u5B8C\u5584\uFF0C\u8BFB\u8005\u53EF\u4EE5\u6309\u7167\u81EA\u5DF1\u7684\u65B9\u5F0F\u6784\u5EFA\u7F13\u51B2\u533A\u7C7B\uFF0C\u5B8C\u5584\u5176\u4ED6\u7EC6\u8282\uFF0C\u4E3A\u540E\u7EED\u7684\u591A\u7EBF\u7A0B\u670D\u52A1\u5668\u505A\u51C6\u5907\u3002</p>`,16),k=s("\u5B8C\u6574\u6E90\u4EE3\u7801\uFF1A"),r={href:"https://github.com/yuesong-feng/30dayMakeCppServer/tree/main/code/day09",target:"_blank",rel:"noopener noreferrer"},d=s("https://github.com/yuesong-feng/30dayMakeCppServer/tree/main/code/day09");function v(b,m){const a=u("ExternalLinkIcon");return t(),o("div",null,[i,n("p",null,[k,n("a",r,[d,e(a)])])])}const y=p(l,[["render",v],["__file","day09-\u7F13\u51B2\u533A-\u5927\u4F5C\u7528.html.vue"]]);export{y as default};
