import{_ as p,o as e,c as t,b as n,d as o,a as c,e as s,r as l}from"../app.dbff23ac.mjs";const i={},r=c(`<h1 id="postgresql\u81EA\u5B9A\u4E49\u6587\u672C\u68C0\u7D22\u5206\u8BCD\u89C4\u5219" tabindex="-1"><a class="header-anchor" href="#postgresql\u81EA\u5B9A\u4E49\u6587\u672C\u68C0\u7D22\u5206\u8BCD\u89C4\u5219" aria-hidden="true">#</a> PostgreSQL\u81EA\u5B9A\u4E49\u6587\u672C\u68C0\u7D22\u5206\u8BCD\u89C4\u5219</h1><p>PostgreSQL\u7684\u5012\u6392\u7D22\u5F15\u5341\u5206\u5F3A\u5927\uFF0C\u867D\u7136\u4E3A\u6587\u672C\u68C0\u7D22\u8BBE\u8BA1\uFF0C\u4F46\u4E5F\u53EF\u4EE5\u79FB\u690D\u5230\u5176\u4ED6\u7528\u9014\u3002</p><p>\u6709\u5982\u4E0B\u6570\u636E\u8868\uFF0C\u5176\u4E2D<code>tagset</code>\u662F\u4E00\u7CFB\u5217<code>tag</code>\u7684\u96C6\u5408\uFF1A</p><table><thead><tr><th>id</th><th>tagset</th></tr></thead><tbody><tr><td>1001</td><td>&quot;tag_01 tag_02 tag_05&quot;</td></tr><tr><td>1024</td><td>&quot;tag_02 tag_04 tag_06&quot;</td></tr><tr><td>1032</td><td>&quot;tag_03 tag_05 tag_06&quot;</td></tr></tbody></table><p>\u8981\u901A\u8FC7<code>id</code>\u627E\u5230<code>tagset</code>\uFF0C\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528\u666E\u901AB+\u6811\u7D22\u5F15\u3002\u4F46\u8981\u662F\u60F3\u9AD8\u6548\u5730\u901A\u8FC7<code>tag</code>\u6765\u627E\u5230\u6240\u6709\u7684<code>id</code>\u5462\uFF1F</p><p>\u4F8B\u5982\uFF0C\u901A\u8FC7<code>tag_05</code>\u5FEB\u901F\u627E\u5230<code>id</code> 1001\u548C1032\uFF0C\u901A\u8FC7<code>tag_02 AND tag_05</code>\u5FEB\u901F\u627E\u5230<code>id</code> 1001\uFF0C\u901A\u8FC7<code>tag_02 OR tag_04</code>\u5FEB\u901F\u627E\u5230<code>id</code> 1001\u548C1024\u3002</p><p>B+\u6811\u7D22\u5F15\u65E0\u6CD5\u5B8C\u6210\u8FD9\u4E2A\u529F\u80FD\uFF0C\u76F4\u63A5\u5199SQL\u67E5\u8BE2\uFF08<code>LIKE</code>\u8BED\u53E5\uFF09\u5C06\u4F1A\u7279\u522B\u590D\u6742\u3001\u7279\u522B\u6162\u3002\u800C\u6587\u672C\u641C\u7D22+\u5012\u6392\u7D22\u5F15\u53EF\u4EE5\u5B9E\u73B0\u8FD9\u4E2A\u5FEB\u901F\u67E5\u627E\u7684\u529F\u80FD\u3002</p><p>\u4E3B\u8981\u601D\u8DEF\u4E3A\uFF0C\u5148\u5C06<code>tagset</code>\u8F6C\u5316\u4E3A<code>ts_vector</code>\uFF0C\u7136\u540E\u5C06\u67E5\u8BE2\u8F6C\u5316\u4E3A<code>ts_query</code>\uFF0C\u4F7F\u7528\u6587\u672C\u5339\u914D\u7684\u65B9\u5F0F\u6765\u67E5\u8BE2\u5BF9\u5E94\u7684<code>id</code>\uFF0C\u5E76\u5EFA\u7ACB\u5012\u6392\u7D22\u5F15\u52A0\u901F\u67E5\u8BE2\u3002</p><p>\u6B64\u65F6\u53C8\u9047\u5230\u4E86\u95EE\u9898\uFF0C\u5C06<code>tagset</code>\u8F6C\u5316\u4E3A<code>ts_vector</code>\u9700\u8981\u7ECF\u8FC7\u5206\u8BCD\u5668\u8F6C\u5316\u4E3Atoken\uFF0C\u7136\u540E\u7ECF\u8FC7\u4E00\u7CFB\u5217\u5B57\u5178\u8FC7\u6EE4\u6389\u65E0\u5173\u4FE1\u606F\u3001\u8F6C\u5316\u4E3Alexeme\u3002\u7531\u4E8E\u662F\u4E3A\u6587\u672C\u68C0\u7D22\u800C\u8BBE\u8BA1\uFF0C\u6240\u4EE5\u9ED8\u8BA4\u7684\u5206\u8BCD\u89C4\u5219\u548C\u5B57\u5178\u90FD\u662F\u6309\u7167\u81EA\u7136\u8BED\u8A00\u7684\u89C4\u5219\u6765\u5B9E\u73B0\u3002\u8981\u5B9E\u73B0\u81EA\u5DF1\u7684\u529F\u80FD\uFF0C\u5FC5\u987B\u81EA\u5B9A\u4E49\u6587\u672C\u68C0\u7D22\u914D\u7F6E\u3002</p><p><code>CREATE TEXT SEARCH [CONFIGURATION|DICTIONARY|PARSER|TEMPLATE]</code></p><p>PostgreSQL\u63D0\u4F9B\u4E86\u4E30\u5BCC\u7684\u5B57\u5178\u81EA\u5B9A\u4E49\u65B9\u6CD5\uFF0C\u53EF\u4EE5\u5F88\u8F7B\u677E\u5730\u5BF9\u5B57\u5178\u7684\u89C4\u5219\u8FDB\u884C\u81EA\u5B9A\u4E49\u3002\u800C\u5BF9\u4E8E\u5206\u8BCD\u89C4\u5219\uFF0CPostgreSQL\u53EA\u6709\u4E00\u5957\u5206\u8BCD\u903B\u8F91\uFF0C\u5728\u6E90\u7801<code>src/backend/tsearch/wparser_def.c</code>\u4E2D\u5B9E\u73B0\uFF0C\u5B98\u65B9\u6587\u6863\u5199\u660E\u9002\u7528\u4E8E\u7EDD\u5927\u90E8\u5206\u6587\u672C\u3002\u4F46\u5BF9\u4E8E\u4EE5\u4E0A\u9700\u6C42\uFF0C\u5DF2\u7ECF\u4E0D\u662F\u6587\u672C\u68C0\u7D22\uFF0C\u800C\u662F\u4E3A\u4E86\u4F7F\u7528\u6587\u672C\u68C0\u7D22+\u5012\u6392\u7D22\u5F15\u5B9E\u73B0\u81EA\u5DF1\u7684\u67E5\u8BE2\u9700\u6C42\uFF0C\u6240\u4EE5\u5206\u8BCD\u5668\u4E5F\u9700\u8981\u81EA\u5B9A\u4E49\u3002</p><p>\u5BF9\u4E8E<code>tagset</code>\uFF0C\u5206\u5272\u4E3A<code>tag</code>\u7684\u65F6\u5019\uFF0C\u5982\u679C\u4F7F\u7528\u9ED8\u8BA4\u7684\u5206\u8BCD\u89C4\u5219\uFF0C\u6781\u6709\u53EF\u80FD\u9047\u5230\u5C06\u4E00\u4E2A<code>tag</code>\u7EE7\u7EED\u62C6\u5206\u3001\u6216\u8005\u591A\u4E2A<code>tag</code>\u4E0D\u62C6\u5206\u7684\u9519\u8BEF\uFF0C\u4E5F\u5C31\u662F\u6CA1\u6709\u6309\u7167\u6211\u4EEC\u60F3\u8981\u7684\u89C4\u5219\u8FDB\u884C\u5206\u8BCD\u3002\u5982\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>yuesong<span class="token operator">=</span><span class="token comment"># SELECT to_tsvector(&#39;token_01 tagset-02 tagset03 token:04&#39;);</span>
                        to_tsvector                        
<span class="token comment">-----------------------------------------------------------</span>
 <span class="token string">&#39;-02&#39;</span>:<span class="token number">4</span> <span class="token string">&#39;01&#39;</span>:<span class="token number">2</span> <span class="token string">&#39;04&#39;</span>:<span class="token number">7</span> <span class="token string">&#39;tagset&#39;</span>:<span class="token number">3</span> <span class="token string">&#39;tagset03&#39;</span>:<span class="token number">5</span> <span class="token string">&#39;token&#39;</span>:<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span>
<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span>

yuesong<span class="token operator">=</span><span class="token comment"># SELECT alias, description, token FROM ts_debug(&#39;token_01 tagset-02 tagset03 token:04&#39;);</span>
   alias   <span class="token operator">|</span>       description        <span class="token operator">|</span>  token   
<span class="token comment">-----------+--------------------------+----------</span>
 asciiword <span class="token operator">|</span> Word<span class="token punctuation">,</span> <span class="token keyword">all</span> ASCII          <span class="token operator">|</span> token
 blank     <span class="token operator">|</span> Space symbols            <span class="token operator">|</span> _
 uint      <span class="token operator">|</span> <span class="token keyword">Unsigned</span> <span class="token keyword">integer</span>         <span class="token operator">|</span> <span class="token number">01</span>
 blank     <span class="token operator">|</span> Space symbols            <span class="token operator">|</span>  
 asciiword <span class="token operator">|</span> Word<span class="token punctuation">,</span> <span class="token keyword">all</span> ASCII          <span class="token operator">|</span> tagset
 <span class="token keyword">int</span>       <span class="token operator">|</span> Signed <span class="token keyword">integer</span>           <span class="token operator">|</span> <span class="token operator">-</span><span class="token number">02</span>
 blank     <span class="token operator">|</span> Space symbols            <span class="token operator">|</span>  
 numword   <span class="token operator">|</span> Word<span class="token punctuation">,</span> letters <span class="token operator">and</span> digits <span class="token operator">|</span> tagset03
 blank     <span class="token operator">|</span> Space symbols            <span class="token operator">|</span>  
 asciiword <span class="token operator">|</span> Word<span class="token punctuation">,</span> <span class="token keyword">all</span> ASCII          <span class="token operator">|</span> token
 blank     <span class="token operator">|</span> Space symbols            <span class="token operator">|</span> :
 uint      <span class="token operator">|</span> <span class="token keyword">Unsigned</span> <span class="token keyword">integer</span>         <span class="token operator">|</span> <span class="token number">04</span>
<span class="token punctuation">(</span><span class="token number">12</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6211\u4EEC\u5E0C\u671B\u6309\u7A7A\u683C\u62C6\u5206\u62104\u4E2A<code>tag</code>\uFF0C\u800C\u9ED8\u8BA4\u7684\u5206\u8BCD\u89C4\u5219\u8FDB\u884C\u4E86\u80E1\u4E71\u62C6\u5206\uFF0C\u5C06<code>_</code>\u3001<code>:</code>\u5F53\u6210\u4E86\u5206\u9694\u7B26\uFF0C\u5C06<code>-</code>\u5904\u7406\u6210\u4E86\u8D1F\u53F7\u3002</p><p>\u63A5\u4E0B\u6765\u81EA\u5B9A\u4E49\u4E00\u4E2A\u5206\u8BCD\u5668\uFF0C\u5B9E\u73B0\u81EA\u5B9A\u4E49\u89C4\u5219\u62C6\u5206token\u7684\u529F\u80FD\u3002\u5982\u679C\u76F4\u63A5\u6539\u52A8\u9ED8\u8BA4\u5206\u8BCD\u89C4\u5219<code>src/backend/tsearch/wparser_def.c</code>\uFF0C\u5C06\u4F1A\u5F71\u54CD\u5230\u6B63\u5E38\u6587\u672C\u68C0\u7D22\u7684\u5206\u8BCD\u903B\u8F91\uFF0C\u6240\u4EE5\u4F7F\u7528\u63D2\u4EF6\u7684\u65B9\u5F0F\u65B0\u589E\u4E00\u4E2A\u5206\u8BCD\u89C4\u5219\u3002</p><p>PostgreSQL\u81EA\u5B9A\u4E49\u5206\u8BCD\u89C4\u5219\u7684\u8BED\u6CD5\u4E3A\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TEXT</span> SEARCH PARSER name <span class="token punctuation">(</span>
    <span class="token keyword">START</span> <span class="token operator">=</span> start_function <span class="token punctuation">,</span>
    GETTOKEN <span class="token operator">=</span> gettoken_function <span class="token punctuation">,</span>
    <span class="token keyword">END</span> <span class="token operator">=</span> end_function <span class="token punctuation">,</span>
    LEXTYPES <span class="token operator">=</span> lextypes_function
    <span class="token punctuation">[</span><span class="token punctuation">,</span> HEADLINE <span class="token operator">=</span> headline_function <span class="token punctuation">]</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6211\u4EEC\u9700\u8981\u5728\u63D2\u4EF6\u4E2D\u5B9E\u73B0\u56DB\u4E2A\u51FD\u6570\uFF0C\u5206\u522B\u4E3A<code>START</code>, <code>GETTOKEN</code>, <code>END</code>, <code>LEXTYPES</code>\u3002</p><p>\u9996\u5148\u5728\u63D2\u4EF6\u7684<code>.sql</code>\u6587\u4EF6<code>pg_tokenparser--1.0.sql</code>\u91CC\u521B\u5EFA\u539F\u578B\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- \u5F00\u59CB\u89E3\u6790\u51FD\u6570</span>
<span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> parse_start<span class="token punctuation">(</span>internal<span class="token punctuation">,</span>int4<span class="token punctuation">)</span>
    <span class="token keyword">RETURNS</span> internal
    <span class="token keyword">AS</span> <span class="token string">&#39;MODULE_PATHNAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;parse_start&#39;</span>
    <span class="token keyword">LANGUAGE</span> C STRICT<span class="token punctuation">;</span>

<span class="token comment">-- \u83B7\u53D6token\u51FD\u6570</span>
<span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> parse_gettoken<span class="token punctuation">(</span>internal<span class="token punctuation">,</span>internal<span class="token punctuation">,</span>internal<span class="token punctuation">)</span>
    <span class="token keyword">RETURNS</span> internal 
    <span class="token keyword">AS</span> <span class="token string">&#39;MODULE_PATHNAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;parse_gettoken&#39;</span>
    <span class="token keyword">LANGUAGE</span> C STRICT<span class="token punctuation">;</span>

<span class="token comment">-- \u7ED3\u675F\u89E3\u6790\u51FD\u6570</span>
<span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> parse_end<span class="token punctuation">(</span>internal<span class="token punctuation">)</span>
    <span class="token keyword">RETURNS</span> void
    <span class="token keyword">AS</span> <span class="token string">&#39;MODULE_PATHNAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;parse_end&#39;</span>
    <span class="token keyword">LANGUAGE</span> C STRICT<span class="token punctuation">;</span>

<span class="token comment">-- token\u7C7B\u578B\u51FD\u6570</span>
<span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> parse_tokentype<span class="token punctuation">(</span>internal<span class="token punctuation">)</span>
    <span class="token keyword">RETURNS</span> internal
    <span class="token keyword">AS</span> <span class="token string">&#39;MODULE_PATHNAME&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;parse_tokentype&#39;</span>
    <span class="token keyword">LANGUAGE</span> C STRICT<span class="token punctuation">;</span>

<span class="token comment">-- \u521B\u5EFA\u6587\u672C\u68C0\u7D22\u5206\u8BCD\u5668</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TEXT</span> SEARCH PARSER tokenparser<span class="token punctuation">(</span>
    <span class="token keyword">START</span> <span class="token operator">=</span> parse_start<span class="token punctuation">,</span>
    GETTOKEN <span class="token operator">=</span> parse_gettoken<span class="token punctuation">,</span>
    <span class="token keyword">END</span> <span class="token operator">=</span> parse_end<span class="token punctuation">,</span>
    LEXTYPES <span class="token operator">=</span> parse_tokentype
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- \u521B\u5EFA\u81EA\u5B9A\u4E49\u6587\u672C\u68C0\u7D22\u914D\u7F6E\uFF0C\u6307\u5B9A\u5206\u8BCD\u5668\u4E3A\u6211\u4EEC\u81EA\u5B9A\u4E49\u7684\u5206\u8BCD\u5668</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TEXT</span> SEARCH CONFIGURATION my_cfg <span class="token punctuation">(</span>
    PARSER <span class="token operator">=</span> tokenparser
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- \u4E3Aword\u7C7B\u578B\u6DFB\u52A0\u9ED8\u8BA4\u7684\u82F1\u6587\u5B57\u5178\uFF0C\u4EE5\u786E\u4FDD\u8F6C\u5316\u4E3Alexeme\u4E0D\u4F1A\u88AB\u8FC7\u6EE4\u6389</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TEXT</span> SEARCH CONFIGURATION my_cfg <span class="token keyword">ADD</span> MAPPING <span class="token keyword">FOR</span> word <span class="token keyword">WITH</span> english_stem<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7136\u540E\u7528C\u8BED\u8A00\u5B9E\u73B0\u8FD9\u56DB\u4E2A\u5206\u8BCD\u89C4\u5219\u51FD\u6570\uFF0C\u5F53\u524D\u4EC5\u4F7F\u7528\u7A7A\u683C\u6765\u5206\u5272\uFF0Ctoken\u53EA\u6709\u4E00\u79CD\u7C7B\u578B\uFF1A</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">;</span> <span class="token comment">/* text to parse */</span>
  <span class="token keyword">int</span> len<span class="token punctuation">;</span>      <span class="token comment">/* length of the text in buffer */</span>
  <span class="token keyword">int</span> pos<span class="token punctuation">;</span>      <span class="token comment">/* position of the parser */</span>
<span class="token punctuation">}</span> ParserState<span class="token punctuation">;</span>

<span class="token comment">/* copy-paste from wparser.h of tsearch2 */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> lexid<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>alias<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>descr<span class="token punctuation">;</span>
<span class="token punctuation">}</span> LexDescr<span class="token punctuation">;</span>

<span class="token function">PG_FUNCTION_INFO_V1</span><span class="token punctuation">(</span>parse_start<span class="token punctuation">)</span><span class="token punctuation">;</span>
Datum <span class="token function">parse_start</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">PG_FUNCTION_INFO_V1</span><span class="token punctuation">(</span>parse_gettoken<span class="token punctuation">)</span><span class="token punctuation">;</span>
Datum <span class="token function">parse_gettoken</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">PG_FUNCTION_INFO_V1</span><span class="token punctuation">(</span>parse_end<span class="token punctuation">)</span><span class="token punctuation">;</span>
Datum <span class="token function">parse_end</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">PG_FUNCTION_INFO_V1</span><span class="token punctuation">(</span>parse_tokentype<span class="token punctuation">)</span><span class="token punctuation">;</span>
Datum <span class="token function">parse_tokentype</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span><span class="token punctuation">;</span>


Datum <span class="token function">parse_start</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ParserState <span class="token operator">*</span>pst <span class="token operator">=</span> <span class="token punctuation">(</span>ParserState <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">palloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ParserState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pst<span class="token operator">-&gt;</span>buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PG_GETARG_POINTER</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pst<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token function">PG_GETARG_INT32</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  pst<span class="token operator">-&gt;</span>pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token function">PG_RETURN_POINTER</span><span class="token punctuation">(</span>pst<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Datum <span class="token function">parse_gettoken</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ParserState <span class="token operator">*</span>pst <span class="token operator">=</span> <span class="token punctuation">(</span>ParserState <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PG_GETARG_POINTER</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PG_GETARG_POINTER</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token operator">*</span>tlen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PG_GETARG_POINTER</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> type<span class="token punctuation">;</span>
  <span class="token operator">*</span>tlen <span class="token operator">=</span> pst<span class="token operator">-&gt;</span>pos<span class="token punctuation">;</span>
  <span class="token operator">*</span>t <span class="token operator">=</span> pst<span class="token operator">-&gt;</span>buffer <span class="token operator">+</span> pst<span class="token operator">-&gt;</span>pos<span class="token punctuation">;</span>

  <span class="token comment">/* main process here */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pst<span class="token operator">-&gt;</span>buffer<span class="token punctuation">)</span><span class="token punctuation">[</span>pst<span class="token operator">-&gt;</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/* blank type */</span>
    type <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token comment">/* go to the next non-white-space character */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pst<span class="token operator">-&gt;</span>buffer<span class="token punctuation">)</span><span class="token punctuation">[</span>pst<span class="token operator">-&gt;</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pst<span class="token operator">-&gt;</span>pos <span class="token operator">&lt;</span> pst<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>pst<span class="token operator">-&gt;</span>pos<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">/* word type */</span>
    type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token comment">/* go to the next white-space character */</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pst<span class="token operator">-&gt;</span>buffer<span class="token punctuation">)</span><span class="token punctuation">[</span>pst<span class="token operator">-&gt;</span>pos<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pst<span class="token operator">-&gt;</span>pos <span class="token operator">&lt;</span> pst<span class="token operator">-&gt;</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>pst<span class="token operator">-&gt;</span>pos<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token operator">*</span>tlen <span class="token operator">=</span> pst<span class="token operator">-&gt;</span>pos <span class="token operator">-</span> <span class="token operator">*</span>tlen<span class="token punctuation">;</span>

  <span class="token comment">/* we are finished if (*tlen == 0) */</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>tlen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
    type <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">PG_RETURN_INT32</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Datum <span class="token function">parse_end</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ParserState <span class="token operator">*</span>pst <span class="token operator">=</span> <span class="token punctuation">(</span>ParserState <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">PG_GETARG_POINTER</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pfree</span><span class="token punctuation">(</span>pst<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">PG_RETURN_VOID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

Datum <span class="token function">parse_tokentype</span><span class="token punctuation">(</span>PG_FUNCTION_ARGS<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  LexDescr <span class="token operator">*</span>descr <span class="token operator">=</span> <span class="token punctuation">(</span>LexDescr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">palloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LexDescr<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">/* there are only two types in this parser */</span>
  descr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lexid <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  descr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alias <span class="token operator">=</span> <span class="token function">pstrdup</span><span class="token punctuation">(</span><span class="token string">&quot;word&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>descr <span class="token operator">=</span> <span class="token function">pstrdup</span><span class="token punctuation">(</span><span class="token string">&quot;Word&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  descr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lexid <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
  descr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alias <span class="token operator">=</span> <span class="token function">pstrdup</span><span class="token punctuation">(</span><span class="token string">&quot;blank&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  descr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>descr <span class="token operator">=</span> <span class="token function">pstrdup</span><span class="token punctuation">(</span><span class="token string">&quot;Space symbols&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  descr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lexid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">PG_RETURN_POINTER</span><span class="token punctuation">(</span>descr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7F16\u8BD1\u3001\u5B89\u88C5\u63D2\u4EF6\u540E\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u4F7F\u7528\u6211\u4EEC\u81EA\u5B9A\u4E49\u7684\u5206\u8BCD\u89C4\u5219\uFF1A</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code>yuesong<span class="token operator">=</span><span class="token comment"># SELECT alias, description, token FROM ts_debug(&#39;my_cfg&#39;, &#39;token_01 tagset-02 tagset03 token:04&#39;);</span>
 alias <span class="token operator">|</span>  description  <span class="token operator">|</span>   token   
<span class="token comment">-------+---------------+-----------</span>
 word  <span class="token operator">|</span> Word          <span class="token operator">|</span> token_01
 blank <span class="token operator">|</span> Space symbols <span class="token operator">|</span>  
 word  <span class="token operator">|</span> Word          <span class="token operator">|</span> tagset<span class="token operator">-</span><span class="token number">02</span>
 blank <span class="token operator">|</span> Space symbols <span class="token operator">|</span>  
 word  <span class="token operator">|</span> Word          <span class="token operator">|</span> tagset03
 blank <span class="token operator">|</span> Space symbols <span class="token operator">|</span>  
 word  <span class="token operator">|</span> Word          <span class="token operator">|</span> token:<span class="token number">04</span>
<span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">rows</span><span class="token punctuation">)</span>

yuesong<span class="token operator">=</span><span class="token comment"># SELECT to_tsvector(&#39;my_cfg&#39;, &#39;token_01 tagset-02 tagset03 token:04&#39;);</span>
                     to_tsvector                      
<span class="token comment">------------------------------------------------------</span>
 <span class="token string">&#39;tagset-02&#39;</span>:<span class="token number">2</span> <span class="token string">&#39;tagset03&#39;</span>:<span class="token number">3</span> <span class="token string">&#39;token:04&#39;</span>:<span class="token number">4</span> <span class="token string">&#39;token_01&#39;</span>:<span class="token number">1</span>
<span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u770B\u5230<code>tagset</code>\u6309\u7167\u6211\u4EEC\u7684\u8981\u6C42\u88AB\u5206\u6210\u4E86\u56DB\u4E2A<code>tag</code>\uFF0C\u4EC5\u4F7F\u7528\u4E86\u7A7A\u683C\u4F5C\u4E3Atoken\u7684\u5206\u5272\u7B26\uFF0C\u6240\u6709token\u90FD\u662F\u4E00\u79CD\u7C7B\u578B\uFF0C\u5B8C\u6210\u4E86\u9700\u6C42\u3002\u5BF9\u4E8E\u5206\u5272\u7B26\u3001\u5206\u8BCD\u89C4\u5219\u3001\u7C7B\u578B\uFF0C\u90FD\u53EF\u4EE5\u6839\u636E\u9700\u6C42\u81EA\u5B9A\u4E49\u3002</p>`,25),u=s("\u5B8C\u6574\u6E90\u4EE3\u7801\uFF1A"),k={href:"https://github.com/yuesong-feng/pg_tokenparser",target:"_blank",rel:"noopener noreferrer"},d=s("pg_tokenparser");function v(m,b){const a=l("ExternalLinkIcon");return e(),t("div",null,[r,n("p",null,[u,n("a",k,[d,o(a)])])])}const g=p(i,[["render",v],["__file","PostgreSQL\u81EA\u5B9A\u4E49\u6587\u672C\u68C0\u7D22\u5206\u8BCD\u89C4\u5219.html.vue"]]);export{g as default};
